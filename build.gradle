plugins {
    id 'java'
    id 'io.quarkus'
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'io.quarkus:quarkus-rest-client-jackson'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-rest'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
}

group = 'com.ludogoriesoft'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

test {
    // This is the crucial part. It finds .env, reads it, and adds
    // all its key-value pairs as system properties for the test JVM.
    File envFile = rootProject.file('.env')
    if (envFile.exists()) {
        Properties envProps = new Properties()
        envFile.withInputStream { stream -> envProps.load(stream) }
        systemProperties(envProps)
        println "Loaded .env file for testing." // A handy message to confirm it's working
    } else {
        println "No .env file found for testing."
    }

    // This ensures any other system properties are also passed along
    systemProperties(System.getProperties())

    finalizedBy jacocoTestReport
}

// STANDARD JACOCO REPORTING CONFIGURATION
jacocoTestReport {
    dependsOn test // Ensures report waits for tests to finish
    reports {
        xml.required = true // The format SonarCloud needs
    }
}